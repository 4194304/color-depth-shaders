#version 330 core

// Constants
const int NUM_COLORS = 256;  // Number of colors in the palette

// Define the 16-color palette in RGB format
const vec3 palette[NUM_COLORS] = vec3[](
    vec3(0.0,0.0,0.0),       // 000000
    vec3(0.5,0.0,0.0),       // 800000
    vec3(0.0,0.5,0.0),       // 008000
    vec3(0.5,0.5,0.0),       // 808000
    vec3(0.0,0.0,0.5),       // 000080
    vec3(0.5,0.0,0.5),       // 800080
    vec3(0.0,0.5,0.5),       // 008080
    vec3(0.75,0.75,0.75),    // c0c0c0
    vec3(0.7529,0.8627,0.7529), // c0dcc0
    vec3(0.651,0.792,0.941), // a6caf0
    vec3(0.165,0.247,0.666), // 2a3faa
    vec3(0.165,0.247,1.0),   // 2a3fff
    vec3(0.165,0.373,0.0),   // 2a5f00
    vec3(0.165,0.373,0.333), // 2a5f55
    vec3(0.165,0.373,0.666), // 2a5faa
    vec3(0.165,0.373,1.0),   // 2a5fff
    vec3(0.165,0.5,0.0),     // 2a7f00
    vec3(0.165,0.5,0.333),   // 2a7f55
    vec3(0.165,0.5,0.666),   // 2a7faa
    vec3(0.165,0.5,1.0),     // 2a7fff
    vec3(0.165,0.623,0.0),   // 2a9f00
    vec3(0.165,0.623,0.333), // 2a9f55
    vec3(0.165,0.623,0.666), // 2a9faa
    vec3(0.165,0.623,1.0),   // 2a9fff
    vec3(0.165,0.749,0.0),   // 2abf00
    vec3(0.165,0.749,0.333), // 2abf55
    vec3(0.165,0.749,0.666), // 2abfaa
    vec3(0.165,0.749,1.0),   // 2abfff
    vec3(0.165,0.875,0.0),   // 2adf00
    vec3(0.165,0.875,0.333), // 2adf55
    vec3(0.165,0.875,0.666), // 2adfaa
    vec3(0.165,0.875,1.0),   // 2adfff
    vec3(0.165,1.0,0.0),     // 2aff00
    vec3(0.165,1.0,0.333),   // 2aff55
    vec3(0.165,1.0,0.666),   // 2affaa
    vec3(0.165,1.0,1.0),     // 2affff
    vec3(0.333,0.0,0.0),     // 550000
    vec3(0.333,0.0,0.333),   // 550055
    vec3(0.333,0.0,0.666),   // 5500aa
    vec3(0.333,0.0,1.0),     // 5500ff
    vec3(0.333,0.121,0.0),   // 551f00
    vec3(0.333,0.121,0.333), // 551f55
    vec3(0.333,0.121,0.666), // 551faa
    vec3(0.333,0.121,1.0),   // 551fff
    vec3(0.333,0.247,0.0),   // 553f00
    vec3(0.333,0.247,0.333), // 553f55
    vec3(0.333,0.247,0.666), // 553faa
    vec3(0.333,0.247,1.0),   // 553fff
    vec3(0.333,0.373,0.0),   // 555f00
    vec3(0.333,0.373,0.333), // 555f55
    vec3(0.333,0.373,0.666), // 555faa
    vec3(0.333,0.373,1.0),   // 555fff
    vec3(0.333,0.5,0.0),     // 557f00
    vec3(0.333,0.5,0.333),   // 557f55
    vec3(0.333,0.5,0.666),   // 557faa
    vec3(0.333,0.5,1.0),     // 557fff
    vec3(0.333,0.623,0.0),   // 559f00
    vec3(0.333,0.623,0.333), // 559f55
    vec3(0.333,0.623,0.666), // 559faa
    vec3(0.333,0.623,1.0),   // 559fff
    vec3(0.333,0.749,0.0),   // 55bf00
    vec3(0.333,0.749,0.333), // 55bf55
    vec3(0.333,0.749,0.666), // 55bfaa
    vec3(0.333,0.749,1.0),   // 55bfff
    vec3(0.333,0.875,0.0),   // 55df00
    vec3(0.333,0.875,0.333), // 55df55
    vec3(0.333,0.875,0.666), // 55dfaa
    vec3(0.333,0.875,1.0),   // 55dfff
    vec3(0.333,1.0,0.0),     // 55ff00
    vec3(0.333,1.0,0.333),   // 55ff55
    vec3(0.333,1.0,0.666),   // 55ffaa
    vec3(0.333,1.0,1.0),     // 55ffff
    vec3(0.498,0.0,0.0),     // 7f0000
    vec3(0.498,0.0,0.333),   // 7f0055
    vec3(0.498,0.0,0.666),   // 7f00aa
    vec3(0.498,0.0,1.0),     // 7f00ff
    vec3(0.498,0.122,0.0),   // 7f1f00
    vec3(0.498,0.122,0.333), // 7f1f55
    vec3(0.498,0.122,0.666), // 7f1faa
    vec3(0.498,0.122,1.0),   // 7f1fff
    vec3(0.498,0.247,0.0),   // 7f3f00
    vec3(0.498,0.247,0.333), // 7f3f55
    vec3(0.498,0.247,0.666), // 7f3faa
    vec3(0.498,0.247,1.0),   // 7f3fff
    vec3(0.498,0.373,0.0),   // 7f5f00
    vec3(0.498,0.373,0.333), // 7f5f55
    vec3(0.498,0.373,0.666), // 7f5faa
    vec3(0.498,0.373,1.0),   // 7f5fff
    vec3(0.498,0.498,0.0),   // 7f7f00
    vec3(0.498,0.498,0.333), // 7f7f55
    vec3(0.498,0.498,0.666), // 7f7faa
    vec3(0.498,0.498,1.0),   // 7f7fff
    vec3(0.498,0.623,0.0),   // 7f9f00
    vec3(0.498,0.623,0.333), // 7f9f55
    vec3(0.498,0.623,0.666), // 7f9faa
    vec3(0.498,0.623,1.0),   // 7f9fff
    vec3(0.498,0.749,0.0),   // 7fbf00
    vec3(0.498,0.749,0.333), // 7fbf55
    vec3(0.498,0.749,0.666), // 7fbfaa
    vec3(0.498,0.749,1.0),   // 7fbfff
    vec3(0.498,0.875,0.0),   // 7fdf00
    vec3(0.498,0.875,0.333), // 7fdf55
    vec3(0.498,0.875,0.666), // 7fdfaa
    vec3(0.498,0.875,1.0),   // 7fdfff
    vec3(0.498,1.0,0.0),     // 7fff00
    vec3(0.498,1.0,0.333),   // 7fff55
    vec3(0.498,1.0,0.666),   // 7fffaa
    vec3(0.498,1.0,1.0),     // 7fffff
    vec3(0.666,0.0,0.0),     // aa0000
    vec3(0.666,0.0,0.333),   // aa0055
    vec3(0.666,0.0,0.666),   // aa00aa
    vec3(0.666,0.0,1.0),     // aa00ff
    vec3(0.666,0.122,0.0),   // aa1f00
    vec3(0.666,0.122,0.333), // aa1f55
    vec3(0.666,0.122,0.666), // aa1faa
    vec3(0.666,0.122,1.0),   // aa1fff
    vec3(0.666,0.247,0.0),   // aa3f00
    vec3(0.666,0.247,0.333), // aa3f55
    vec3(0.666,0.247,0.666), // aa3faa
    vec3(0.666,0.247,1.0),   // aa3fff
    vec3(0.666,0.373,0.0),   // aa5f00
    vec3(0.666,0.373,0.333), // aa5f55
    vec3(0.666,0.373,0.666), // aa5faa
    vec3(0.666,0.373,1.0),   // aa5fff
    vec3(0.666,0.498,0.0),   // aa7f00
    vec3(0.666,0.498,0.333), // aa7f55
    vec3(0.666,0.498,0.666), // aa7faa
    vec3(0.666,0.498,1.0),   // aa7fff
    vec3(0.666,0.623,0.0),   // aa9f00
    vec3(0.666,0.623,0.333), // aa9f55
    vec3(0.666,0.623,0.666), // aa9faa
    vec3(0.666,0.623,1.0),   // aa9fff
    vec3(0.666,0.749,0.0),   // aabf00
    vec3(0.666,0.749,0.333), // aabf55
    vec3(0.666,0.749,0.666), // aabfaa
    vec3(0.666,0.749,1.0),   // aabfff
    vec3(0.666,0.875,0.0),   // aadf00
    vec3(0.666,0.875,0.333), // aadf55
    vec3(0.666,0.875,0.666), // aadfaa
    vec3(0.666,0.875,1.0),   // aadfff
    vec3(0.666,1.0,0.0),     // aaff00
    vec3(0.666,1.0,0.333),   // aaff55
    vec3(0.666,1.0,0.666),   // aaffaa
    vec3(0.666,1.0,1.0),     // aaffff
    vec3(0.831,0.0,0.0),     // d40000
    vec3(0.831,0.0,0.333),   // d40055
    vec3(0.831,0.0,0.666),   // d400aa
    vec3(0.831,0.0,1.0),     // d400ff
    vec3(0.831,0.122,0.0),   // d41f00
    vec3(0.831,0.122,0.333), // d41f55
    vec3(0.831,0.122,0.666), // d41faa
    vec3(0.831,0.122,1.0),   // d41fff
    vec3(0.831,0.247,0.0),   // d43f00
    vec3(0.831,0.247,0.333), // d43f55
    vec3(0.831,0.247,0.666), // d43faa
    vec3(0.831,0.247,1.0),   // d43fff
    vec3(0.831,0.373,0.0),   // d45f00
    vec3(0.831,0.373,0.333), // d45f55
    vec3(0.831,0.373,0.666), // d45faa
    vec3(0.831,0.373,1.0),   // d45fff
    vec3(0.831,0.498,0.0),   // d47f00
    vec3(0.831,0.498,0.333), // d47f55
    vec3(0.831,0.498,0.666), // d47faa
    vec3(0.831,0.498,1.0),   // d47fff
    vec3(0.831,0.623,0.0),   // d49f00
    vec3(0.831,0.623,0.333), // d49f55
    vec3(0.831,0.623,0.666), // d49faa
    vec3(0.831,0.623,1.0),   // d49fff
    vec3(0.831,0.749,0.0),   // d4bf00
    vec3(0.831,0.749,0.333), // d4bf55
    vec3(0.831,0.749,0.666), // d4bfaa
    vec3(0.831,0.749,1.0),   // d4bfff
    vec3(0.831,0.875,0.0),   // d4df00
    vec3(0.831,0.875,0.333), // d4df55
    vec3(0.831,0.875,0.666), // d4dfaa
    vec3(0.831,0.875,1.0),   // d4dfff
    vec3(0.831,1.0,0.0),     // d4ff00
    vec3(0.831,1.0,0.333),   // d4ff55
    vec3(0.831,1.0,0.666),   // d4ffaa
    vec3(0.831,1.0,1.0),     // d4ffff
    vec3(1.0,0.0,0.333),     // ff0055
    vec3(1.0,0.0,0.666),     // ff00aa
    vec3(1.0,0.122,0.0),     // ff1f00
    vec3(1.0,0.122,0.333),   // ff1f55
    vec3(1.0,0.122,0.666),   // ff1faa
    vec3(1.0,0.122,1.0),     // ff1fff
    vec3(1.0,0.247,0.0),     // ff3f00
    vec3(1.0,0.247,0.333),   // ff3f55
    vec3(1.0,0.247,0.666),   // ff3faa
    vec3(1.0,0.247,1.0),     // ff3fff
    vec3(1.0,0.373,0.0),     // ff5f00
    vec3(1.0,0.373,0.333),   // ff5f55
    vec3(1.0,0.373,0.666),   // ff5faa
    vec3(1.0,0.373,1.0),     // ff5fff
    vec3(1.0,0.498,0.0),     // ff7f00
    vec3(1.0,0.498,0.333),   // ff7f55
    vec3(1.0,0.498,0.666),   // ff7faa
    vec3(1.0,0.498,1.0),     // ff7fff
    vec3(1.0,0.623,0.0),     // ff9f00
    vec3(1.0,0.623,0.333),   // ff9f55
    vec3(1.0,0.623,0.666),   // ff9faa
    vec3(1.0,0.623,1.0),     // ff9fff
    vec3(1.0,0.749,0.0),     // ffbf00
    vec3(1.0,0.749,0.333),   // ffbf55
    vec3(1.0,0.749,0.666),   // ffbfaa
    vec3(1.0,0.749,1.0),     // ffbfff
    vec3(1.0,0.875,0.0),     // ffdf00
    vec3(1.0,0.875,0.333),   // ffdf55
    vec3(1.0,0.875,0.666),   // ffdfaa
    vec3(1.0,0.875,1.0),     // ffdfff
    vec3(1.0,1.0,0.333),     // ffff55
    vec3(1.0,1.0,0.666),     // ffffaa
    vec3(0.8,0.8,1.0),       // ccccff
    vec3(1.0,0.8,1.0),       // ffccff
    vec3(0.2,1.0,1.0),       // 33ffff
    vec3(0.4,1.0,1.0),       // 66ffff
    vec3(0.6,1.0,1.0),       // 99ffff
    vec3(0.8,1.0,1.0),       // ccffff
    vec3(0.0,0.498,0.0),     // 007f00
    vec3(0.0,0.498,0.333),   // 007f55
    vec3(0.0,0.498,0.666),   // 007faa
    vec3(0.0,0.498,1.0),     // 007fff
    vec3(0.0,0.623,0.0),     // 009f00
    vec3(0.0,0.623,0.333),   // 009f55
    vec3(0.0,0.623,0.666),   // 009faa
    vec3(0.0,0.623,1.0),     // 009fff
    vec3(0.0,0.749,0.0),     // 00bf00
    vec3(0.0,0.749,0.333),   // 00bf55
    vec3(0.0,0.749,0.666),   // 00bfaa
    vec3(0.0,0.749,1.0),     // 00bfff
    vec3(0.0,0.875,0.0),     // 00df00
    vec3(0.0,0.875,0.333),   // 00df55
    vec3(0.0,0.875,0.666),   // 00dfaa
    vec3(0.0,0.875,1.0),     // 00dfff
    vec3(0.0,1.0,0.333),     // 00ff55
    vec3(0.0,1.0,0.666),     // 00ffaa
    vec3(0.165,0.0,0.0),     // 2a0000
    vec3(0.165,0.0,0.333),   // 2a0055
    vec3(0.165,0.0,0.666),   // 2a00aa
    vec3(0.165,0.0,1.0),     // 2a00ff
    vec3(0.165,0.122,0.0),   // 2a1f00
    vec3(0.165,0.122,0.333), // 2a1f55
    vec3(0.165,0.122,0.666), // 2a1faa
    vec3(0.165,0.122,1.0),   // 2a1fff
    vec3(0.165,0.247,0.0),   // 2a3f00
    vec3(0.165,0.247,0.333), // 2a3f55
    vec3(1.0,0.992,0.941),   // fffbf0
    vec3(0.627,0.627,0.643), // a0a0a4
    vec3(0.502,0.502,0.502), // 808080
    vec3(1.0,0.0,0.0),       // ff0000
    vec3(0.0,1.0,0.0),       // 00ff00
    vec3(1.0,1.0,0.0),       // ffff00
    vec3(0.0,0.0,1.0),       // 0000ff
    vec3(1.0,0.0,1.0),       // ff00ff
    vec3(0.0,1.0,1.0),       // 00ffff
    vec3(1.0,1.0,1.0)        // ffffff
);


// Uniforms
in vec2 texcoord;
uniform float opacity;
uniform sampler2D tex;

// Function to clamp values
#define saturate(v) clamp(v, 0.0, 1.0)

// Function to find the closest color in the palette by comparing normalized RGB values
vec3 get_closest_palette_color(vec3 color) {
    float min_dist = 1e10;
    vec3 closest_color = palette[0];

    // Loop through each color in the palette and find the closest match
    for (int i = 0; i < NUM_COLORS; i++) {
        // Direct RGB comparison using Euclidean distance
        float dist = length(color - palette[i]);
        if (dist < min_dist) {
            min_dist = dist;
            closest_color = palette[i];
        }
    }

    return closest_color;
}

// Main shader function that applies the closest palette color mapping
vec4 window_shader() {
    // Fetch the texture color at the given coordinates
    vec4 color = texelFetch(tex, ivec2(texcoord), 0) * opacity;

    // Normalize the RGB color (assuming it's in the [0, 1] range already)
    // If your color is in the [0, 255] range, you'd want to divide by 255
    vec3 normalized_color = color.rgb;

    // Find the closest match to the palette color
    vec3 closest_palette_color = get_closest_palette_color(normalized_color);

    // Return the closest palette color with the original alpha
    return vec4(closest_palette_color, color.a);
}
